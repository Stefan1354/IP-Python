#Методът ord() в Python преобразува символ в неговата кодова стойност на Unicode.


#Функцията dict() създава речник.Речникът е колекция, която е неподредена, променлива и индексирана.


#Методът set() се използва за съхраняване на множество елементи в една променлива.Наборът е колекция, която е 
#неподредена, непроменлива и неиндексирана.


#Функцията input() позволява въвеждане от потребителя.


#Функцията chr() връща символа, който представлява посочения уникод.


#Функцията choice() връща произволен елемент от списък, кортеж или низ.


#Методът reverse() обръща реда на сортиране на елементите.


#Методът sort() сортира списъка възходящо по подразбиране.


#keys() в речника на Python, връща изглед обект, който показва списък с всички ключове в речника по реда на вмъкване.


#Методът values() връща изглед обект. Обектът view съдържа стойностите на речника, като списък.


#Методът len() в Python връща дължината на списък, низ, речник или всеки друг итерируем формат на данни в Python.


#В Python операторът assert се използва за продължаване на изпълнението, ако даденото условие се оценява на True.
#Ако условието assert се оценява на False, тогава то повдига изключението AssertionError с посоченото съобщение за 
#грешка.


#Операторът break прекратява цикъла, който го съдържа. Управлението на програмата преминава към оператора 
#непосредствено след тялото на цикъла.
#Ако операторът break е вътре в вложен цикъл (цикл вътре в друг цикъл), операторът break ще прекрати най-вътрешния цикъл.


#Операторът continue инструктира цикъл да продължи към следващата итерация. Всеки код, който следва оператора за 
#продължаване, не се изпълнява. За разлика от оператор break, оператор continue не спира напълно цикъл. 
#Можете да използвате израз за продължаване в Python, за да 
#пропуснете част от цикъл, когато е изпълнено условие.


#Класът е дефиниран от потребителя, от който се създават обекти. Класовете осигуряват средство
#за групиране на данни и функционалност заедно. Създаването на нов клас създава нов тип обект, което позволява 
#създаването на нови екземпляри от този тип.


#Всички класове имат функция, наречена __init__(), която винаги се изпълнява, когато класът се инициира.


#В Python дефинирането на функцията работи по следния начин. def е ключовата дума за дефиниране на функция. 
#Името на функцията е последвано от параметър(и) в ().


#Ключовата дума del в python се използва основно за изтриване на обекти в Python. Тъй като всичко в python 
#представлява обект по един или друг начин, ключовата дума del може да се използва и за изтриване на списък, 
#разделяне на списък, изтриване на речници, премахване на двойки ключ-стойност от речник, изтриване на променливи
#и т.н.


#Блокът try ви позволява да тествате блок код за грешки.


#Блокът except ви позволява да се справите с грешката.


#Блокът finally винаги се изпълнява след нормално прекратяване на блока try или след прекратяване на
#блока try поради някакво изключение.


#В Python глобалната ключова дума ви позволява да модифицирате променливата извън текущия обхват. 
#Използва се за създаване на глобална променлива и извършване на промени в променливата в локален контекст.


#Модулите на Python могат да получат достъп до код от друг модул, като импортират файла/функцията чрез импортиране. 
#Инструкцията за импортиране е най-често срещаният начин за извикване на машината за импортиране, но не е 
#единственият начин.
#Модулът е същият като библиотека с кодове.
#Файл, съдържащ набор от функции, които искате да включите във вашето приложение.


#Ламбда функцията е малка анонимна функция.
#Ламбда функцията може да приема произволен брой аргументи, но може да има само един израз.


#Ключовата дума None се използва за дефиниране на нулева променлива или обект. В Python ключовата дума None е обект
#и е тип данни на класа NoneType. Можем да присвоим None на всяка променлива, но не можете да създавате други
#NoneType обекти. Забележка: Всички променливи, на които е присвоено None, сочат към един и същ обект.


#В Python pass е нулев израз. Интерпретаторът не пренебрегва оператор pass, но нищо не се случва и операторът не 
#води до никаква операция. Операторът pass е полезен, когато не пишете реализацията на функция, но искате да я 
#приложите в бъдеще.


#Ключовата дума raise се използва за повдигане на изключение.
#Можете да дефинирате какъв вид грешка да се повдигне и текстът да се отпечата на потребителя.


#Ключовата дума return в Python излиза от функция и казва на Python да стартира останалата част от основната 
#програма. Ключовата дума за връщане може да изпрати стойност обратно към основната програма. Въпреки, 
#че стойностите може да са били дефинирани във функция, можете да ги изпратите обратно в основната си 
#програма и да ги прочетете в целия си код.


#Почти всяка стойност се оценява на True, ако има някакво съдържание.
#Всеки низ е True, с изключение на празните низове.
#Всяко число е вярно, с изключение на 0.
#Всеки списък, кортеж, набор и речник са True, с изключение на празните.


#Всъщност няма много стойности, които се оценяват на False, освен празни стойности, като (), [], {}, "",
# числото 0 и стойността None. И разбира се стойността False оценява на False.


#С цикъла while можем да изпълним набор от оператори, стига условието да е вярно.


#Цикълът for се използва за повторение на последователност (това е или списък, кортеж, речник, набор или низ).
#Това е по-малко като ключовата дума for в други езици за програмиране и работи повече като метод на итератор, както се намира в други обектно-ориентирани езици за програмиране.
#С цикъла for можем да изпълним набор от оператори, веднъж за всеки елемент от списък, кортеж, набор и т.н.


#with в Python се използва при обработка на изключения, за да направи кода по-чист и много по-четлив. 
#Той опростява управлението на общи ресурси като файлови потоци.


#Yield е ключова дума в Python, която се използва за връщане от функция, без да се унищожават състоянията на 
#нейната локална променлива и когато функцията е извикана, изпълнението започва от последния израз за yield. 
#Всяка функция, която съдържа ключова дума за доходност, се нарича генератор. Следователно добивът е това,
#което прави генератор. Ключовата дума yield в Python е по-малко известна, но има по-голяма полезност, за 
#която човек може да се сети.


#Методът swapcase() връща низ, където всички главни букви са малки и обратно.


#Методът upper() връща низ, където всички знаци са в главни букви.


#Методът lower() връща низ, където всички знаци са с малки букви.


#Методът title() връща низ, където първият знак във всяка дума е главни букви. 
#Ако думата съдържа число или символ, първата буква след нея ще бъде преобразувана в главни букви.


#Функцията map() изпълнява определена функция за всеки елемент в итерируем. 
#Елементът се изпраща на функцията като параметър.


#Методът split() разделя низ в списък.


#Matplotlib е библиотека за графики на ниско ниво в python, която служи 
#като помощна програма за визуализация.


#NumPy е библиотека на Python, използвана за работа с масиви. Освен това има функции за
#работа в областта на линейната алгебра и матриците.


#Методът endswith() връща True, ако низът завършва с посочената стойност, в противен случай False.


#Функцията enumerate() взема колекция (например кортеж) и я връща като обект за изброяване.
#Функцията enumerate() добавя брояч като ключ на обекта enumerate.


#Ключовата дума elif е начин на python да се
#каже "ако предишните условия не са били верни, опитайте това условие".


#Ключовата дума else в цикъл for указва блок от код, който да бъде изпълнен, когато цикълът приключи.


#Методът replace() заменя определена фраза с друга определена фраза.


#За да отворите файла, използвайте вградената функция open().
#Функцията open() връща файлов обект, който има метод read() за четене на съдържанието на файла.


#Функцията round() връща число с плаваща запетая, което е закръглена версия на
#посоченото число с посочения брой десетични знаци.Броят на десетичните знаци по подразбиране е 0, 
#което означава, че функцията ще върне най-близкото цяло число.


#seed() - Инициализирайте генератора на произволни числа.


#randrange(), randint() - Връща произволно число между дадения диапазон.


#choice() - Връща произволен елемент от дадената последователност.


#and - Връща True, ако и двете твърдения са верни.


#or - Връща True, ако едно от твърденията е вярно.


#not - 	Обърнете резултата, връща False, ако резултатът е верен.


#Методът strip() премахва всички водещи (интервали в началото) и крайни (интервали в края) знаци 
#(интервалът е водещият символ по подразбиране за премахване).


#Методът format() форматира посочените стойности и ги вмъква в заместителя на низа.


#Методът get() връща стойността на елемента с посочения ключ.


#List comprehension предлага по-кратък синтаксис, когато искате да създадете нов списък
#въз основа на стойностите на съществуващ списък.


#Функцията zip() връща zip обект, който е итератор от кортежи, където първият елемент 
#във всеки предаден итератор е сдвоен заедно, а след това вторият елемент във всеки предаден 
#итератор се сдвоява заедно и т.н.


#Методът count() връща броя на елементите с посочената стойност.


#Функцията range() връща поредица от числа, започвайки от 0 по подразбиране и
#увеличава с 1 (по подразбиране) и спира преди определено число.


#Методът update() вмъква посочените елементи в речника.


#Методът capitalize() връща низ, където първият символ е главна буква, а останалите са малки.


#Методът casefold() връща низ, където всички знаци са с малки букви.


#Методът center() ще центрира низа, като използва определен знак (интервалът е по подразбиране) 
#като символ за запълване.


#Методът seed() се използва за инициализиране на генератора на произволни числа.
#Генераторът на произволни числа се нуждае от число, с което да започне (начална стойност), за да може 
#да генерира произволно число.


# *args - Ако не знаете колко аргумента ще бъдат предадени във вашата функция, добавете * преди името на 
#параметъра в дефиницията на функцията.По този начин функцията ще получи набор
#от аргументи и съответно ще има достъп до елементите.


# **kwargs - Ако не знаете колко аргумента на ключовите думи ще бъдат предадени във вашата функция,
#добавете две звездички: ** преди името на параметъра в дефиницията на функцията.
#По този начин функцията ще получи речник с аргументи и съответно ще има достъп до елементите.


#Функцията int() преобразува посочената стойност в цяло число.


#Функцията float() преобразува посочената стойност в число с плаваща запетая.


#Функцията enumerate() взема колекция (например кортеж) и я връща като обект за изброяване.
#Функцията enumerate() добавя брояч като ключ на обекта enumerate.
# Когато използвате enumerate(), функцията ви връща две променливи на цикъла:
# 1. Броят на текущата итерация
# 2. Стойността на елемента при текущата итерация

#Funkciqta str() e prednaznacena da vurshta predstavqniq na stoinosti, koito sa
#cetimi na coveka;

#Funckiqta repr() e prednaznacena da generira predstavqniq, koito mogat da
#budat proceteni ot interpretatora


